
#if(${moduleName} != "")
package com.world.controller.admin.${moduleName}.${classname};


import com.world.model.entity.${moduleName}.${className};
import com.world.service.${moduleName}.${className}Service;
#else
package com.world.controller.admin.${classname};


import com.world.model.entity.${className};
import com.world.service.${className}.${className}Service;
#end
import com.world.util.Message;
import com.world.util.date.TimeUtil;
import com.world.web.Page;
import com.world.web.action.AdminAction;
import com.world.web.convention.annotation.FunctionAction;
import me.chanjar.weixin.common.util.StringUtils;
import com.world.model.entity.user.User;
import com.world.model.dao.user.UserDao;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Date;
import java.time.ZoneId;


/**
 * ${comments}管理
 *
 * @author ${author}
 * @date ${datetime}
 */
#if(${moduleName} != "")
@FunctionAction(jspPath = "/admins/${moduleName}/${classname}/", des = "${comments}管理")
#else
@FunctionAction(jspPath = "/admins/${classname}/", des = "${comments}管理")
#end
public class Index extends AdminAction {
    private ${className}Service ${classname}Service = new ${className}Service();
    private UserDao userDao = new UserDao();


    @Page(Viewer = DEFAULT_INDEX)
    public void index(){
        try {
            Integer pageNo   = intParam("page",1);
            Integer pageSize = intParam("pageSize",20);
            if(pageNo == 0){
                pageNo =1;
            }
            if(pageSize == 0){
                pageSize =20;
            }

            ${className} ${classname} = new ${className}();

#if(${hasUserId})
            String userName = param("userName");
            if(StringUtils.isNotBlank(userName)){
                User user = userDao.getByUserName(userName);
                ${classname}.setUserId(user == null ? 0 : user.getUserIdInt());
            }
#end
#if(${hasCurrencyId})
            String currencyName = param("currencyName");
            if(StringUtils.isNotBlank(currencyName)){
                CoinProps coinProps = DatabasesUtil.getCoin(currencyName);
                defiincome.setCurrencyId(coinProps == null ? 0 : coinProps.getFundsType());
            }
#end
#if(${hasCreateTime})
            String    startTime = param("startTime");
            String    endTime   = param("endTime");

            com.world.model.vo.Page<${className}> dataList = ${classname}Service.getList( ${classname},pageNo, pageSize,startTime,endTime);
#else
            com.world.model.vo.Page<${className}> dataList = ${classname}Service.getList( ${classname},pageNo, pageSize);
#end
            setAttr("dataList",dataList.getResults());
            setAttr("itemCount", dataList.getTotalCount());
            setPaging(dataList.getTotalCount(), pageNo, pageSize);
        } catch (Exception e) {
            log.error("${comments}管理：", e);
        }
    }

    @Page(Viewer = DEFAULT_AORU)
    public void aoru() {
        int id = intParam("id");
        ${className} entity = ${classname}Service.getById(id);
        setAttr("entity", entity);
        setAttr("pId", id);
    }

    @Page(Viewer = XML)
    public void doAoru() {
        if(!codeCorrect(XML)){
            return;
        }
        try {
#foreach ($column in $columns)
#if(${column.attrType}=="Integer")
            int ${column.attrname} = intParam("${column.attrname}");
#elseif(${column.attrType}=="BigDecimal")
            BigDecimal ${column.attrname} = new BigDecimal(param("${column.attrname}"));
#elseif(${column.attrType}=="Date")
            Date ${column.attrname} = Date.from(LocalDateTime.parse(super.param("${column.attrname}"), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")).atZone(ZoneId.systemDefault()).toInstant());
#else
            String ${column.attrname} = param("${column.attrname}");
#end

#end

            ${className} ${classname} = new ${className}();
#foreach ($column in $columns)
            ${classname}.set${column.attrName}(${column.attrname});
#end

            if (${classname}.getId() > 0) {
                Message message = ${classname}Service.update(${classname});
                WriteRight(message.getMsg());
            } else {
                Message message = ${classname}Service.save(${classname});
                WriteRight(message.getMsg());
            }
        } catch (Exception e) {
            log.error("admin修改或新增${comments}管理失败：", e);
            WriteError("操作失败");
        }
    }

    @Page(Viewer = DEFAULT_AJAX)
    public void ajax() {
        index();
    }


#if(${hasStatus})

#if(${moduleName} != "")
    @Page(Viewer = "/admins/${moduleName}/${classname}/updateStatus.jsp")
#else
    @Page(Viewer = "/admins/${classname}/updateStatus.jsp")
#end
    public void updateStatus() {
        int id = intParam("id");
        setAttr("id", id);
    }

    /**
   * 更新状态
   */
    @Page(Viewer = XML)
    public void doUpdateStatus() {
        try {
            int id=intParam("id");
            int status = intParam("status");

            try {
                Message message = ${classname}Service.updateStatus(id, status,0);
                if(message.isSuc()){
                    WriteRight("更新成功");
                    return;
                }else {
                    WriteError("更新失败");
                    return;
                }

            } catch (Exception e){
                log.error("updateNotify error "+e.getMessage());
                WriteError("更新失败");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
#end

}

